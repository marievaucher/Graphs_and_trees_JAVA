package packnp.tests.tools;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import packnp.tests.graphe.AretePonderee;
import packnp.tests.graphe.GrapheNonOrientePondere;
import packnp.tests.graphe.TasBinaire;

public class TestsSA2020TP6 {

	public static int test01EstConnexe() {
		Double[][][] matrices={
				{
					{-1.,  0., -1.,  2., -1.},
					{ 0., -1.,  1., -1.,  4.},
					{-1.,  1., -1.,  3.,  7.},
					{ 2., -1.,  3., -1.,  1.},
					{-1.,  4.,  7.,  1., -1.}
				},{
					{-1.,  2.,  1.,  2.},
					{ 2., -1.,  1.,  2.},
					{ 1.,  1., -1.,  3.},
					{ 2.,  2.,  3., -1.},
				},{
					{-1.,  4., -1.,  3., -1., -1.,  1., -1.},
					{ 4., -1.,  6., -1.,  7., -1., -1., -1.},
					{-1.,  6., -1.,  4.,  1.,  3., -1., -1.},
					{ 3., -1.,  4., -1., -1.,  5., -1., -1.},
					{-1.,  7.,  1., -1., -1.,  6.,  4., -1.},
					{-1., -1.,  3.,  5.,  6., -1., -1.,  4.},
					{ 1., -1., -1., -1.,  4., -1., -1.,  2.},
					{-1., -1., -1., -1., -1.,  4.,  2., -1.},
				},{
					{-1., -1., -1., -1., -1., -1.},	
					{-1., -1., -1., -1., -1., -1.},	
					{-1., -1., -1., -1., -1., -1.},	
					{-1., -1., -1., -1., -1., -1.},	
					{-1., -1., -1., -1., -1., -1.},	
					{-1., -1., -1., -1., -1., -1.},	
				},{
					{-1.,  4., -1., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1., -1.},	
					{-1., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1., -1., -1., -1.,  2., -1.},	
				},{
					{-1.,  4.,  8., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1., -1.},	
					{ 8., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1., -1., -1., -1.,  2., -1.},	
				},{
					{-1.,  4.,  8., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1., -1.},	
					{ 8., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1.,  7.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1., -1., -1.,  7.,  2., -1.},	
				}, {
					{-1.,  4.,  8., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1.,  8.},	
					{ 8., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1.,  8., -1., -1.,  2., -1.},	
				}, {
					{-1.,  4., -1., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1.,  8.},	
					{-1., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1.,  8., -1., -1.,  2., -1.},	
				}, {
					{-1.,  4., -1., -1., -1., -1.},	
					{ 4., -1., -1.,  2., -1.,  8.},	
					{-1., -1., -1.,  6., -1., -1.},	
					{-1.,  2.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1.,  8., -1., -1.,  2., -1.},	
				}
		};
		boolean[]  oracle = { true,true,true,false,false,false,true,true,false,true};
		GrapheNonOrientePondere g;
		System.out.println("");
		for (int i=0; i<matrices.length; i++) {
			g = new GrapheNonOrientePondere(matrices[i]);
			String gbefore = g.toString();
			boolean res= g.estConnexe();
			if (res!=oracle[i]) {
				System.out.println("Sur le graphe :\n"+gbefore+"\n"+g.toStringMatrice());
				System.out.println("Votre implementation de estConnexe retourne "+res+" au lieu de "+oracle[i]);
				return 0;
			}
		}
		System.out.println("  Ok. Votre code passe le test.");	
		return 100;
	}

	public static int test02TasBinaireAdd() {
		System.out.println(" Test verifiant le comportement de la methode add de TasBinaire");
		Integer[][] t = {
				{7, 3, 2, 4, 9, 11, 8, 15, 16, 1, 18, 17, 12, 14, 6, 13, 5, 10, 20, 19},
				{9, 11, 15, 7, 5, 6, 4, 18, 3, 14, 19, 13, 16, 8, 12, 2, 10, 17, 20, 1},
				{19, 7, 15, 9, 5, 13, 16, 3, 1, 11, 14, 2, 20, 4, 17, 6, 10, 18, 12, 8},
				{3, 8, 17, 9, 11, 16, 7, 2, 20, 10, 14, 13, 6, 1, 4, 19, 5, 15, 12, 18},
		};
		Integer[][][] ttas = {
				{
					{7},
					{3,7},
					{2,7,3},
					{2,4,3,7},
					{2,4,3,7,9},
					{2,4,3,7,9,11},
					{2,4,3,7,9,11,8},
					{2,4,3,7,9,11,8,15},
					{2,4,3,7,9,11,8,15,16},
					{1,2,3,7,4,11,8,15,16,9},
					{1,2,3,7,4,11,8,15,16,9,18},
					{1,2,3,7,4,11,8,15,16,9,18,17},
					{1,2,3,7,4,11,8,15,16,9,18,17,12},
					{1,2,3,7,4,11,8,15,16,9,18,17,12,14},
					{1,2,3,7,4,11,6,15,16,9,18,17,12,14,8},
					{1,2,3,7,4,11,6,13,16,9,18,17,12,14,8,15},
					{1,2,3,5,4,11,6,7,16,9,18,17,12,14,8,15,13},
					{1,2,3,5,4,11,6,7,10,9,18,17,12,14,8,15,13,16},
					{1,2,3,5,4,11,6,7,10,9,18,17,12,14,8,15,13,16,20},
					{1,2,3,5,4,11,6,7,10,9,18,17,12,14,8,15,13,16,20,19},
				},{
					{9},
					{9,11},
					{9,11,15},
					{7,9,15,11},
					{5,7,15,11,9},
					{5,7,6,11,9,15},
					{4,7,5,11,9,15,6},
					{4,7,5,11,9,15,6,18},
					{3,4,5,7,9,15,6,18,11},
					{3,4,5,7,9,15,6,18,11,14},
					{3,4,5,7,9,15,6,18,11,14,19},
					{3,4,5,7,9,13,6,18,11,14,19,15},
					{3,4,5,7,9,13,6,18,11,14,19,15,16},
					{3,4,5,7,9,13,6,18,11,14,19,15,16,8},
					{3,4,5,7,9,13,6,18,11,14,19,15,16,8,12},
					{2,3,5,4,9,13,6,7,11,14,19,15,16,8,12,18},
					{2,3,5,4,9,13,6,7,11,14,19,15,16,8,12,18,10},
					{2,3,5,4,9,13,6,7,11,14,19,15,16,8,12,18,10,17},
					{2,3,5,4,9,13,6,7,11,14,19,15,16,8,12,18,10,17,20},
					{1,2,5,4,3,13,6,7,11,9,19,15,16,8,12,18,10,17,20,14},
				},{
					{19},
					{7,19},
					{7,19,15},
					{7,9,15,19},
					{5,7,15,19,9},
					{5,7,13,19,9,15},
					{5,7,13,19,9,15,16},
					{3,5,13,7,9,15,16,19},
					{1,3,13,5,9,15,16,19,7},
					{1,3,13,5,9,15,16,19,7,11},
					{1,3,13,5,9,15,16,19,7,11,14},
					{1,3,2,5,9,13,16,19,7,11,14,15},
					{1,3,2,5,9,13,16,19,7,11,14,15,20},
					{1,3,2,5,9,13,4,19,7,11,14,15,20,16},
					{1,3,2,5,9,13,4,19,7,11,14,15,20,16,17},
					{1,3,2,5,9,13,4,6,7,11,14,15,20,16,17,19},
					{1,3,2,5,9,13,4,6,7,11,14,15,20,16,17,19,10},
					{1,3,2,5,9,13,4,6,7,11,14,15,20,16,17,19,10,18},
					{1,3,2,5,9,13,4,6,7,11,14,15,20,16,17,19,10,18,12},
					{1,3,2,5,8,13,4,6,7,9,14,15,20,16,17,19,10,18,12,11},
				},{
					{3},
					{3,8},
					{3,8,17},
					{3,8,17,9},
					{3,8,17,9,11},
					{3,8,16,9,11,17},
					{3,8,7,9,11,17,16},
					{2,3,7,8,11,17,16,9},
					{2,3,7,8,11,17,16,9,20},
					{2,3,7,8,10,17,16,9,20,11},
					{2,3,7,8,10,17,16,9,20,11,14},
					{2,3,7,8,10,13,16,9,20,11,14,17},
					{2,3,6,8,10,7,16,9,20,11,14,17,13},
					{1,3,2,8,10,7,6,9,20,11,14,17,13,16},
					{1,3,2,8,10,7,4,9,20,11,14,17,13,16,6},
					{1,3,2,8,10,7,4,9,20,11,14,17,13,16,6,19},
					{1,3,2,5,10,7,4,8,20,11,14,17,13,16,6,19,9},
					{1,3,2,5,10,7,4,8,15,11,14,17,13,16,6,19,9,20},
					{1,3,2,5,10,7,4,8,12,11,14,17,13,16,6,19,9,20,15},
					{1,3,2,5,10,7,4,8,12,11,14,17,13,16,6,19,9,20,15,18},
				}

		};

		for (int i=0; i<t.length; i++) {
			TasBinaire<Integer> tas = new TasBinaire<Integer>();
			for (int j=0; j<t[i].length; j++) {
				tas.add(t[i][j]);
				TasBinaire<Integer> oracle = new TasBinaire<Integer>(ttas[i][j]);
				if (tas.equals(oracle)) {
				} else {
					if (j>0) {
						System.out.println("   Aie... apres avoir ajoute tour a tour les entiers :");
						for (int k=0;k<j; k++) {
							System.out.print(t[i][k]+" ");
						}
						System.out.println(" on obtient un tas correct :\n"+new TasBinaire<Integer>(ttas[i][j-1]).toString());
						System.out.println("  mais add("+t[i][j]+") dans ce tas aboutit a :\n"+tas);
						System.out.println("\n  au lieu du tas :\n"+oracle);
					} else {
						System.out.println(" apres add("+t[i][j]+") dans un tas vide on obtient le tas :\n"+tas);
						System.out.println("\n  au lieu du tas :\n"+oracle);
					}
					return 0;
				}
			}
		}
		System.out.println("   Ok. Votre code passe le test.");
		return 100;
	}

	public static int test03TasBinaireIndexPlusPetitFils() {
		System.out.println(" Test verifiant le comportement de la methode remove de TasBinaire");
		Integer[][] t = {
				{1,2,3,5,4,11,6,7,10,9,18,17,12,14,8,15,13,16,20,19},
				{1,2,5,4,3,13,6,7,11,9,19,15,16,8,12,18,10,17,20,14},
				{1,3,2,5,8,13,4,6,7,9,14,15,20,16,17,19,10,18,12,11},
				{1,3,2,5,10,7,4,8,12,11,14,17,13,16,6,19,9,20,15,18},
		};
		int[][] oracle = {
				{1,4,6,7,9,12,14,16,17,19,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,},
				{1,4,6,7,9,11,13,16,17,19,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,},
				{2,3,6,7,9,11,13,16,18,19,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,},
				{2,3,6,7,9,12,14,16,18,19,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,2147483647,}	
		};
		for (int i=0; i<t.length; i++) {
			TasBinaire<Integer> tas = new TasBinaire<Integer>(t[i]);
			for (int j=0; j<t[i].length; j++) {
				int res = tas.indexPlusPetitFils(j);
				if (res!=oracle[i][j]) {
					System.out.println(" Aie... sur le tas :\n"+tas);
					System.out.println(" indexPlusPetitFils("+j+") retourne "+(res==Integer.MAX_VALUE? "Integer.MAX_VALUE":res)+" au lieu de "+(oracle[i][j]==Integer.MAX_VALUE? "Integer.MAX_VALUE":oracle[i][j]));
					return 0;
				}
			}
		}	
		System.out.println("   Ok. Votre code passe le test.");
		return 100;
	}

	public static int test04TasBinaireRemove() {
		System.out.println(" Test verifiant le comportement de la methode remove de TasBinaire");
		Integer[][] t = {
				{1,2,3,5,4,11,6,7,10,9,18,17,12,14,8,15,13,16,20,19},
				{1,2,5,4,3,13,6,7,11,9,19,15,16,8,12,18,10,17,20,14},
				{1,3,2,5,8,13,4,6,7,9,14,15,20,16,17,19,10,18,12,11},
				{1,3,2,5,10,7,4,8,12,11,14,17,13,16,6,19,9,20,15,18},
		};
		int[] oracleRes = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
		Integer[][][] ttas = {
				{
					{2,4,3,5,9,11,6,7,10,19,18,17,12,14,8,15,13,16,20}, 
					{3,4,6,5,9,11,8,7,10,19,18,17,12,14,20,15,13,16}, 
					{4,5,6,7,9,11,8,13,10,19,18,17,12,14,20,15,16}, 
					{5,7,6,10,9,11,8,13,16,19,18,17,12,14,20,15}, 
					{6,7,8,10,9,11,14,13,16,19,18,17,12,15,20}, 
					{7,9,8,10,18,11,14,13,16,19,20,17,12,15}, 
					{8,9,11,10,18,12,14,13,16,19,20,17,15}, 
					{9,10,11,13,18,12,14,15,16,19,20,17}, 
					{10,13,11,15,18,12,14,17,16,19,20}, 
					{11,13,12,15,18,20,14,17,16,19}, 
					{12,13,14,15,18,20,19,17,16}, 
					{13,15,14,16,18,20,19,17}, 
					{14,15,17,16,18,20,19}, 
					{15,16,17,19,18,20}, 
					{16,18,17,19,20}, 
					{17,18,20,19}, 
					{18,19,20}, 
					{19,20}, 
					{20}, 
					{}, 
				},{
					{2,3,5,4,9,13,6,7,11,14,19,15,16,8,12,18,10,17,20}, 
					{3,4,5,7,9,13,6,10,11,14,19,15,16,8,12,18,20,17}, 
					{4,7,5,10,9,13,6,17,11,14,19,15,16,8,12,18,20}, 
					{5,7,6,10,9,13,8,17,11,14,19,15,16,20,12,18}, 
					{6,7,8,10,9,13,12,17,11,14,19,15,16,20,18}, 
					{7,9,8,10,14,13,12,17,11,18,19,15,16,20}, 
					{8,9,12,10,14,13,20,17,11,18,19,15,16}, 
					{9,10,12,11,14,13,20,17,16,18,19,15}, 
					{10,11,12,15,14,13,20,17,16,18,19}, 
					{11,14,12,15,18,13,20,17,16,19}, 
					{12,14,13,15,18,19,20,17,16}, 
					{13,14,16,15,18,19,20,17}, 
					{14,15,16,17,18,19,20}, 
					{15,17,16,20,18,19}, 
					{16,17,19,20,18}, 
					{17,18,19,20}, 
					{18,20,19}, 
					{19,20}, 
					{20}, 
					{}, 
				},{
					{2,3,4,5,8,13,11,6,7,9,14,15,20,16,17,19,10,18,12}, 
					{3,5,4,6,8,13,11,10,7,9,14,15,20,16,17,19,12,18}, 
					{4,5,11,6,8,13,16,10,7,9,14,15,20,18,17,19,12}, 
					{5,6,11,7,8,13,16,10,12,9,14,15,20,18,17,19}, 
					{6,7,11,10,8,13,16,19,12,9,14,15,20,18,17}, 
					{7,8,11,10,9,13,16,19,12,17,14,15,20,18}, 
					{8,9,11,10,14,13,16,19,12,17,18,15,20}, 
					{9,10,11,12,14,13,16,19,20,17,18,15}, 
					{10,12,11,15,14,13,16,19,20,17,18}, 
					{11,12,13,15,14,18,16,19,20,17}, 
					{12,14,13,15,17,18,16,19,20}, 
					{13,14,16,15,17,18,20,19}, 
					{14,15,16,19,17,18,20}, 
					{15,17,16,19,20,18}, 
					{16,17,18,19,20}, 
					{17,19,18,20}, 
					{18,19,20}, 
					{19,20}, 
					{20}, 
					{}, 
				},{
					{2,3,4,5,10,7,6,8,12,11,14,17,13,16,18,19,9,20,15}, 
					{3,5,4,8,10,7,6,9,12,11,14,17,13,16,18,19,15,20}, 
					{4,5,6,8,10,7,16,9,12,11,14,17,13,20,18,19,15}, 
					{5,8,6,9,10,7,16,15,12,11,14,17,13,20,18,19}, 
					{6,8,7,9,10,13,16,15,12,11,14,17,19,20,18}, 
					{7,8,13,9,10,17,16,15,12,11,14,18,19,20}, 
					{8,9,13,12,10,17,16,15,20,11,14,18,19}, 
					{9,10,13,12,11,17,16,15,20,19,14,18}, 
					{10,11,13,12,14,17,16,15,20,19,18}, 
					{11,12,13,15,14,17,16,18,20,19}, 
					{12,14,13,15,19,17,16,18,20}, 
					{13,14,16,15,19,17,20,18}, 
					{14,15,16,18,19,17,20}, 
					{15,18,16,20,19,17}, 
					{16,18,17,20,19}, 
					{17,18,19,20}, 
					{18,20,19}, 
					{19,20}, 
					{20}, 
					{}, 
				}
		};
		for (int i=0; i<t.length; i++) {
			TasBinaire<Integer> tas = new TasBinaire<Integer>(t[i]);
			for (int j=0; j<t[i].length; j++) {
				Integer r = tas.remove();
				if (r==null) {
					System.out.println("   Aie... sur un tas non vide remove retourne null au lieu de la racine");
					return 0;
				}
				int res = r.intValue();//tas.remove();
				if (res!=oracleRes[j]) {
					if (j>0) {
						System.out.println("   Aie... sur le tas :\n"+new TasBinaire<Integer>(ttas[i][j-1]).toString());
						System.out.println(" remove() retourne "+res+" au lieu de "+oracleRes[j]);
						return 0;
					} else {
						System.out.println("   Aie... sur le tas :\n"+new TasBinaire<Integer>(t[i]).toString());
						System.out.println(" remove() retourne "+res+" au lieu de "+oracleRes[j]);
						return 0;
					}
				}
				if (!tas.equals(new TasBinaire<Integer>(ttas[i][j]))) {
					if (j==0) {
						System.out.println("   Aie... sur le tas :\n"+new TasBinaire<Integer>(t[i]).toString());
						System.out.println("   apres remove() le tas vaut :\n"+tas);
						System.out.println("   au lieu de :\n"+new TasBinaire<Integer>(ttas[i][j]));
						return 0;
					} else {
						System.out.println("   Aie... sur le tas :\n"+new TasBinaire<Integer>(ttas[i][j-1]).toString());
						System.out.println("   apres remove() le tas vaut :\n"+tas);
						System.out.println("   au lieu de :\n"+new TasBinaire<Integer>(ttas[i][j]));
						return 0;
					}
				}
			}
		}	
		System.out.println("   Ok. Votre code passe le test.");
		return 100;
	}

	public static int test05Prim() {
		System.out.println(" Test verifiant le comportement de la methode prim de GrapheNonOrientePondere");
		Double[][][] matrices={
				{
					{-1.,  0., -1.,  2., -1.},
					{ 0., -1.,  1., -1.,  4.},
					{-1.,  1., -1.,  3.,  7.},
					{ 2., -1.,  3., -1.,  8.},
					{-1.,  4.,  7.,  8., -1.}
				},{
					{-1.,  2.,  1.,  6.},
					{ 2., -1.,  5.,  4.},
					{ 1.,  5., -1.,  3.},
					{ 6.,  4.,  3., -1.},
				},{
					{-1.,  4., -1., 13., -1., -1.,  1., -1.},
					{ 4., -1.,  6., -1.,  7., -1., -1., -1.},
					{-1.,  6., -1.,  9.,  8.,  3., -1., -1.},
					{13., -1.,  9., -1., -1., 12., -1., -1.},
					{-1.,  7.,  8., -1., -1., 11., 10., -1.},
					{-1., -1.,  3., 12., 11., -1., -1.,  5.},
					{ 1., -1., -1., -1., 10., -1., -1.,  2.},
					{-1., -1., -1., -1., -1.,  5.,  2., -1.},
				},{
					{-1.,  4.,  8., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1., -1.},	
					{ 8., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1.,  7.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1., -1., -1.,  7.,  2., -1.},	
				}, {
					{-1.,  4.,  8., -1., -1., -1.},	
					{ 4., -1., -1., -1., -1.,  9.},	
					{ 8., -1., -1.,  6., -1., -1.},	
					{-1., -1.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1.,  9., -1., -1.,  2., -1.},	
				}, {
					{-1.,  4., -1., -1., -1., -1.},	
					{ 4., -1., -1.,  3., -1.,  8.},	
					{-1., -1., -1.,  6., -1., -1.},	
					{-1.,  3.,  6., -1., -1., -1.},	
					{-1., -1., -1., -1., -1.,  2.},	
					{-1.,  8., -1., -1.,  2., -1.},	
				}
		};
		AretePonderee[][] t=
			{
					{new AretePonderee(2.0,"s0","s3"), new AretePonderee(0.0,"s0","s1"), new AretePonderee(1.0,"s1","s2"), new AretePonderee(4.0,"s1","s4")},
					{new AretePonderee(3.0,"s2","s3"), new AretePonderee(1.0,"s0","s2"), new AretePonderee(2.0,"s0","s1")},
					{new AretePonderee(9.0,"s2","s3"), new AretePonderee(3.0,"s2","s5"), new AretePonderee(5.0,"s5","s7"), new AretePonderee(2.0,"s6","s7"), new AretePonderee(1.0,"s0","s6"), new AretePonderee(4.0,"s0","s1"), new AretePonderee(7.0,"s1","s4")},
					{new AretePonderee(6.0,"s2","s3"), new AretePonderee(7.0,"s3","s5"), new AretePonderee(2.0,"s4","s5"), new AretePonderee(8.0,"s0","s2"), new AretePonderee(4.0,"s0","s1")},
					{new AretePonderee(6.0,"s2","s3"), new AretePonderee(8.0,"s0","s2"), new AretePonderee(4.0,"s0","s1"), new AretePonderee(9.0,"s1","s5"), new AretePonderee(2.0,"s4","s5")},
					{new AretePonderee(3.0,"s1","s3"), new AretePonderee(4.0,"s0","s1"), new AretePonderee(6.0,"s2","s3"), new AretePonderee(8.0,"s1","s5"), new AretePonderee(2.0,"s4","s5")}
			};

		GrapheNonOrientePondere g;
		System.out.println("");
		for (int i=0; i<matrices.length; i++) {
			g = new GrapheNonOrientePondere(matrices[i]);
			String gBefore = g.toString();
			String gBeforeMat = g.toStringMatrice();
			List<AretePonderee>res = g.prim();
			Collections.sort(res);
			List<AretePonderee>oracle = new ArrayList<AretePonderee>();
			oracle.addAll(Arrays.asList(t[i]));
			Collections.sort(oracle);
			if (!res.equals(oracle)) {
				System.out.println("Sur le graphe :\n"+gBefore+"\n"+gBeforeMat);
				System.out.println("Votre implementation de prim retourne "+res+" au lieu de "+oracle);
				return 0;
			}
		}
		System.out.println("  Ok. Votre code passe le test.");	
		return 100;
	}

}